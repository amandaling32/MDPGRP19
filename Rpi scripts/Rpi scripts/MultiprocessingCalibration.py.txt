from Android import Android_communicator
from Stm import Stm_communicator
from Algorithm import Algorithm_communicator
from Config import STOPPING_IMAGE, IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_FORMAT
from Protocols import *
import os

#from PIL import Image
#import numpy as np
import imagezmq.imagezmq as imagezmq
import time
from picamera import PiCamera
from picamera.array import PiRGBArray


import collections
from multiprocessing import Process, Value, Manager

import ast
import queue

img_count = 0

class MultiProcessCommunicator:
    """
    This class will carry out multi-processing communication process between Algorithm, Android_communicator and STM.
    """
    def __init__(self, image_processing_server_url: str=None):
        """
        Start the multiprocessing process and set up all the relevant variables
        Upon starting, RPi will connect to individual devices in the following order
        - Algorithm
        - Stm
        - Android
        The multiprocessing queue will also be instantiated
        """
        print('Starting Multiprocessing Communication')

        self.algorithm = Algorithm_communicator()  # handles connection to Algorithm
        self.stm = Stm_communicator()  # handles connection to Stm
        self.android = Android_communicator()  # handles connection to Android
        
        self.manager = Manager()

        self.stm_is_rdy_to_take_commands = self.manager.Value('i', 1)
        self.start_imagerec_task = self.manager.Value('i', 1)


        # messages from Stm_communicator, Algorithm and Android_communicator are placed in this queue before being read
        self.message_queue = self.manager.Queue()

        # this is needed to send commands (movement, take pic) over to stm or rpi
        self.algo_cmds_queue = self.manager.Queue() 


        self.to_android_message_queue = self.manager.Queue()

        self.read_stm_process = Process(target=self._read_stm)
        self.read_algorithm_process = Process(target=self._read_algorithm)
        self.read_android_process = Process(target=self._read_android)
        
        self.write_process = Process(target=self._write_target)
        self.write_android_process = Process(target=self._write_android)
        
        # for image recognition
        # self.image_process = Process(target=self._process_pic)
        # self.image_queue = self.manager.Queue()
        
        
        # the current action / status of the robot
        
        #self.status = Status.IDLE  # robot starts off being idle

        #self.dropped_connection = Value('i',0) # 0 - stm, 1 - algorithm

        # for image recognition
        self.image_process = None
        # self.image_queue = None
        
        # if image_processing_server_url is not None:
        #     print('------Start Identifying with image recognition-----')
        #     self.image_process = Process(target=self._process_pic)
        #     # pictures taken using the PiCamera are placed in this queue
        #     self.image_queue = self.manager.Queue()

        #     self.image_processing_server_url = image_processing_server_url
        #     self.image_count = Value('i',0)
        #     print("self.image_queue:", self.image_queue)


        
        
    def start(self):        
        try:
            self.android.connect()
            self.algorithm.connect()
            self.stm.connect()

            print('Connected to Algorithm, Stm and Android')

            self.read_algorithm_process.start()
            self.read_stm_process.start()
            self.read_android_process.start()
            self.write_process.start()
            self.write_android_process.start()

            if self.image_process is not None:
                self.image_process.start()
                print('All processes have started : read-stm, read-algorithm, read-android, write-android, image_processing')
            else:
                print('All processes have started : read-stm, read-algorithm, read-android, write-android')

            print('Multiprocess communication session started')
            
        except Exception as error:
            raise error

        self._allow_reconnection()

    def end(self):

        self.algorithm.disconnect_all()
        self.android.disconnect_all()
        print('Multiprocess communication has just stopped')

        

    def _allow_reconnection(self):
        print('RPi can reconnect now')

        while True:
            try:
                if not self.read_algorithm_process.is_alive():
                    self._reconnect_algorithm()

                if not self.read_stm_process.is_alive():
                    self._reconnect_stm()
                    
                if not self.read_android_process.is_alive():
                    self._reconnect_android()
                    
                # if not self.write_process.is_alive():
                #     if self.dropped_connection.value == 0:
                #         self._reconnect_stm()
                #     elif self.dropped_connection.value == 1:
                #         self._reconnect_algorithm()
                        
                if not self.write_android_process.is_alive():
                    self._reconnect_android()
                
                # if self.image_process is not None and not self.image_process.is_alive():
                #    self.image_process.terminate()
                    
            except Exception as error:
                print("Error during reconnection: ",error)
                raise error

    def _reconnect_algorithm(self):
        self.algorithm.disconnect()

        self.read_algorithm_process.terminate()
        self.write_process.terminate()
        self.write_android_process.terminate()

        self.algorithm.connect()

        self.read_algorithm_process = Process(target=self._read_algorithm)
        self.read_algorithm_process.start()

        self.write_process = Process(target=self._write_target)
        self.write_process.start()

        self.write_android_process = Process(target=self._write_android)
        self.write_android_process.start()

        print('Successfully reconnected to Algorithm')

    def _reconnect_stm(self):
        self.stm.disconnect()
        
        self.read_stm_process.terminate()
        self.write_process.terminate()
        self.write_android_process.terminate()

        self.stm.connect()

        self.read_stm_process = Process(target=self._read_stm)
        self.read_stm_process.start()

        self.write_process = Process(target=self._write_target)
        self.write_process.start()
        
        self.write_android_process = Process(target=self._write_android)
        self.write_android_process.start()

        print('Successfully reconnected to stm')


    def _reconnect_android(self):
        self.android.disconnect()
        
        self.read_android_process.terminate()
        self.write_process.terminate()
        self.write_android_process.terminate()
        
        self.android.connect()
        
        self.read_android_process = Process(target=self._read_android)
        self.read_android_process.start()

        self.write_process = Process(target=self._write_target)
        self.write_process.start()
        
        self.write_android_process = Process(target=self._write_android)
        self.write_android_process.start()

        print('Successfully reconnected to android')
        
    def _read_stm(self):
        while True:
            try:
                messages = self.stm.read()

                if messages is None:
                    continue
                message_list = messages.splitlines()
                
                for message in message_list:
                
                    if len(message) <= 0:
                        continue    
                    
                    print("harrow!")
                    print(message)
                    print(Stm.READY_TO_TAKE_CMD)
                    print(message[0])

                    if message == Stm.READY_TO_TAKE_CMD:
                        print("entered if")
                        # update location when finish executing movement cmds
                        # self.message_queue.put_nowait(self._format_for(
                        #                         ANDROID_HEADER, 
                        #                         message
                        # ))
                        self.stm_is_rdy_to_take_commands.value = 1

                    # self.message_queue.put_nowait(self._format_for(
                    #     ALGORITHM_HEADER, 
                    #     message + NEWLINE
                    # ))
                    
            except Exception as error:
                print('Process read_stm failed: ' + str(error))
                break    

    def _read_algorithm(self):
        while True:
            try:
                messages = self.algorithm.read()
                
                if messages is None:
                    continue
                
                message_list = messages.splitlines()
                
                for message in message_list:
                
                    if len(message) <= 0:
                        continue
                    
                    print(message)
                    print(message[0])


                    if message[0] == Algorithm_RPi.IMAGE_REC_CMDS_COMPUTED:
                        print("Algo computed image rec cmds!")
                        print(message)
                        raw_msg = message.decode()
                        array_in_str = raw_msg[1:]
                        cmds_in_array = ast.literal_eval(array_in_str)
                        print(cmds_in_array)
                        
                        # to prevent appending of queue if android need to send arena again
                        while not self.algo_cmds_queue.empty():
                            self.algo_cmds_queue.get_nowait()
                        self.start_imagerec_task.value = 0
                       
                        for cmd in cmds_in_array:
                            self.algo_cmds_queue.put_nowait(self._format_for(
                                STM_HEADER, 
                                cmd))
                        
                        # self.message_queue.put_nowait(self._format_for(
                        #         ANDROID_HEADER, 
                        #         "{cat: info, value: 'robot ready to start'}"))
                    
                        self.to_android_message_queue.put_nowait("{cat: info, value: 'robot ready to start'}")

                    # movement commands
                    # elif message[0] in Android_Stm.ALL_MESSAGES:
                    #     #self._forward_message_algorithm_to_android(message)
                        
                    #     self.algo_cmds_queue.put_nowait(self._format_for(
                    #         STM_HEADER, 
                    #         message + NEWLINE
                    #     ))

                    #     # self.message_queue.put_nowait(self._format_for(
                    #     #     STM_HEADER, 
                    #     #     message + NEWLINE
                    #     # ))

                    # image recognition
                    elif message[0] == Algorithm_RPi.TAKE_PICTURE:

                        if self.image_count.value >= 5:
                            self.message_queue.put_nowait(self._format_for(
                            ALGORITHM_HEADER, 
                            RPi_Algorithm.DONE_IMG_REC + NEWLINE
                        ))
                        
                        else:
                            de
                            message = message[2:-1]  # to remove 'C[' and ']'
                            self.to_android_message_queue.put_nowait(
                                RPi_Android.STATUS_TAKING_PICTURE + NEWLINE
                            )
                            image = self._take_pic()
                            print('Picture taken')
                            self.message_queue.put_nowait(self._format_for(
                                ALGORITHM_HEADER, 
                                RPi_Algorithm.DONE_TAKING_PICTURE + NEWLINE
                            ))
                            self.image_queue.put_nowait([image,message])

                    # elif message == Algorithm_RPi.IDENTIFYING_IMG_COMPLETE:
                    #     # to let image processing server end all processing and display all images
                    #     self.status = Status.IDLE
                        
                    #     # to use pillow instead of cv2
                    #     pil_img = Image.open(STOPPING_IMAGE).convert('RGB')
                    #     cv_img = np.array(pil_img)
                    #     cv_img = cv_img[:,:,::-1].copy()
                    #     self.image_queue.put_nowait([cv_img,"-1,-1|-1,-1|-1,-1"])

                    elif message[0] == Algorithm_Android.MDF_STRING:
                        self.to_android_message_queue.put_nowait( 
                            message[1:] + NEWLINE
                        )
                        
                
            except Exception as error:
                print('Process read_algorithm failed: ' + str(error))
                break

    def _forward_message_algorithm_to_android(self, message):
        messages_for_android = message.split(MESSAGE_SEPARATOR)

        for message_for_android in messages_for_android:
            
            if len(message_for_android) <= 0:
                continue

            elif message_for_android[0] == Algorithm_Android.CALIBRATING_CORNER:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.STATUS_CALIBRATING_CORNER + NEWLINE
                )

            elif message_for_android[0] == Algorithm_Android.SENSE_ALL:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.STATUS_SENSE_ALL + NEWLINE
                )

            elif message_for_android[0] == Algorithm_Android.ALIGN_RIGHT:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.STATUS_ALIGN_RIGHT + NEWLINE
                )

            elif message_for_android[0] == Algorithm_Android.ALIGN_FRONT:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.STATUS_ALIGN_FRONT + NEWLINE
                )

            elif message_for_android[0] == Algorithm_Android.MOVE_FORWARD:
                if self.status == Status.IDENTIFYING_IMG:
                    self.to_android_message_queue.put_nowait(
                        RPi_Android.STATUS_IDENTIFYING_IMG + NEWLINE
                    )

            elif message_for_android[0] == Algorithm_Android.TURN_LEFT:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.TURN_LEFT + NEWLINE
                )
                
                self.to_android_message_queue.put_nowait(
                   RPi_Android.STATUS_TURNING_LEFT + NEWLINE
                )
            
            elif message_for_android[0] == Algorithm_Android.TURN_RIGHT:
                self.to_android_message_queue.put_nowait(
                    RPi_Android.TURN_RIGHT + NEWLINE
                )
                
                self.to_android_message_queue.put_nowait(
                   RPi_Android.STATUS_TURNING_RIGHT + NEWLINE
                )
            


                forward_steps_no = int(message_for_android.decode()[1:])

                print('Move forward by this number of steps:', forward_steps_no)
                for _ in range(forward_steps_no):
                    self.to_android_message_queue.put_nowait(
                        RPi_Android.MOVE_UP + NEWLINE
                    )           
                    
                    self.to_android_message_queue.put_nowait(
                        RPi_Android.STATUS_MOVING_FORWARD + NEWLINE
                    )        

    def _read_android(self):
        while True:
            try:
                messages = self.android.read()
                
                if messages is None:
                    continue
                else:
                    print("message read from android")
                    print(messages)

                message_list = messages.splitlines()
                #print(message_list)

                for message in message_list:
                    print("checking message")
                    if len(message) <= 0:
                        continue
                    
                    # the first char will determine the instruction
                    elif message[0] in (Android_Stm.ALL_MESSAGES + [Android_RPi.CALIBRATE_SENSOR]):
                    # for manual movement of STM
                        if message == Android_RPi.CALIBRATE_SENSOR:
                            self.message_queue.put_nowait(self._format_for(
                                STM_HEADER, 
                                RPi_Stm.CALIBRATE_SENSOR + NEWLINE
                            ))
                        
                        else: # movement msg from android to stm (android remote controls)
                            self.message_queue.put_nowait(self._format_for(
                                STM_HEADER, message
                            ))
                    else:
                        # automovement of STM via algo
                        #print("before: " + str(self.message_queue.qsize()))

                        if message == Android_Algorithm.START_FASTEST_CAR:
                            self.status = Status.FASTEST_CAR
                            self.message_queue.put_nowait(self._format_for(
                                STM_HEADER,
                                RPi_Stm.START_FASTEST_CAR + NEWLINE
                            ))
                            #print("after: " + str(self.message_queue.qsize()))
                        elif message == Android_Algorithm.START_IMAGE_REC:
                            self.start_imagerec_task.value = 1
                            # self.message_queue.put_nowait(self._format_for(
                            #     ANDROID_HEADER, 
                            #     "{cat: info, value: 'Recognising Images'}"
                            # ))
                            self.to_android_message_queue.put_nowait("{cat: info, value: 'Recognising Images'}")

                            # self.status = Status.IDENTIFYING_IMG
                            #time.sleep(0.5)
                            # self.message_queue.put_nowait(self._format_for(
                            #     STM_HEADER, 
                            #     RPi_Stm.START_IMAGE_REC + NEWLINE
                            # ))
                        elif message[0:2] == Android_Algorithm.SEND_ARENA:
                            print("To algo send arena")
                            print(message[2:])

                            self.message_queue.put_nowait(self._format_for(
                            ALGORITHM_HEADER, 
                            message[2:]
                            ))

                        # self.message_queue.put_nowait(self._format_for(
                        #     ALGORITHM_HEADER, 
                        #     message + NEWLINE
                        # ))
                        
            except Exception as error:
                print('Process read_android failed: ' + str(error))
                #break

    def _write_target(self):
        while True:
            target = None
            message = None
            try:
                #print("write target")
                if self.message_queue.empty() == False:
                    message = self.message_queue.get_nowait()
                    print(message)
                    target, payload = message['target'], message['payload']


                    if target == STM_HEADER:
                        self.stm.write(payload)
                    elif target == ALGORITHM_HEADER:
                        self.algorithm.write(payload)
                    # elif target == ANDROID_HEADER:
                    #     self.android.write(payload)
                    else:
                        print("Invalid header", target)
                
                # if self.stm_is_rdy_to_take_commands.value == 1:
                #     print("fk u")

                # stm can only take in commands one by one
                if self.algo_cmds_queue.empty() == False and self.stm_is_rdy_to_take_commands.value == 1 and self.start_imagerec_task.value == 1:
                    self.stm_is_rdy_to_take_commands.value = 0
                    message = self.algo_cmds_queue.get_nowait()
        
                    print("pop from algo cmds queue")
                    print(message)

                    target, payload = message['target'], message['payload']
                    
                    # take pic command
                    # s00i
                    # 1 <= i <= 8
                    if payload[0:3] == "s00":
                        # time.sleep(1)
                        self.stm_is_rdy_to_take_commands.value = 1

                        # self.stm_is_rdy_to_take_commands.value = 0
                        # image = self._take_pic()
                        # obstacle_id = payload[3]
                        # self.image_queue.put_nowait([image,obstacle_id])
                        print('image queued')
                        continue
                        #continue

                    elif target == STM_HEADER:
                        self.stm.write(payload.encode())
                    else:
                        print("Invalid header", target)
                    
                    # updates location and direction of robot based on cmd
                    payload_for_android = "INSTRUCTION, " + payload
                    # self.message_queue.put_nowait(self._format_for(
                    #     ANDROID_HEADER, 
                    #     payload_for_android
                    # ))
                    self.to_android_message_queue.put_nowait(payload_for_android)



            except Exception as error:
                print('Process write_target failed: ' + str(error))

                if target == STM_HEADER:
                    self.dropped_connection.value = 0

                elif target == ALGORITHM_HEADER:
                    self.dropped_connection.value = 1
                    
                self.message_queue.put_nowait(message)
                
                break
                
    def _write_android(self):
        while True:
            message = None
            try:
                if self.to_android_message_queue.empty() == False:
                    message = self.to_android_message_queue.get_nowait()
                    
                    self.android.write(message)
                
            except Exception as error:
                print('Process write_android failed: ' + str(error))
                self.to_android_message_queue.put_nowait(message)
                break
				
    def _take_pic(self):
        global img_count
        try:

            # # initialise pi camera
            # camera = PiCamera(resolution=(IMAGE_WIDTH, IMAGE_HEIGHT))  # '640x360'
            # camera.awb_mode = 'horizon'

            # # allow the camera to warmup
            # time.sleep(3)
            # rawCapture = PiRGBArray(camera)
            
            # # grab an image from the camera
            # camera.capture(rawCapture, format=IMAGE_FORMAT)
            # image = rawCapture.array
            # pil_img = np.asarray(image)
            # pil_img = Image.fromarray(pil_img[:,:,::-1])
            # pil_img.save('./frame_{}.jpg'.format(img_count))
            # img_count += 1

            # camera.close()

            #sender = imagezmq.ImageSender(connect_to='tcp://192.168.19.54:5555')

            # initialize the camera and grab a reference to the raw camera capture
            camera = PiCamera(resolution=(1920, 1088))  # '1920x1080'
            rawCapture = PiRGBArray(camera)
            
            # allow the camera to warmup
            time.sleep(0.2)
            
            # grab an image from the camera
            camera.capture(rawCapture, format='bgr')
            image = rawCapture.array
            camera.close()

            # print("took image")
            # reply = sender.send_image('image message from RPi', image)
            # print("sent image")
            # reply = reply.decode('utf-8')
            # print("Reply:" + reply)

        except Exception as error:
            print('Picture taking process failed: ' + str(error))
        
        return image
    
    def _process_pic(self):
        print("----------------------- Image Processing Starts -------------------")
        #print(self.image_processing_server_url)
        #print(type(self.image_processing_server_url))
        image_sender = imagezmq.ImageSender(
            connect_to='tcp://192.168.19.54:5555')
        #print(type(self.image_queue))
        image_id_list = []
        while True:
            try:
                if not self.image_queue.empty():
                    message_for_image =  self.image_queue.get_nowait()
                    print("sending image to image processing server")
                    # message_for_image =  self.image_queue.get_nowait()
                    # format: 'x,y|x,y|x,y'
                    #obstacle_coordinates = message_for_image[1]
                    obstacle_id = message_for_image[1]
                    image = message_for_image[0]


                    #print("-----------Prepareing to send image---------")
                    reply = image_sender.send_image(
                        'image message from RPi',
                        image
                    )
                    
                    reply = reply.decode('utf-8')
                    print("Reply:" + reply)
                    # 11 is added to satisfy ntu's requirement for imageid
                    extracted_id = int(reply[1:]) + 11
                    
                    # self.message_queue.put_nowait(self._format_for(
                    #         ANDROID_HEADER, 
                    #         "TARGET," + str(obstacle_id) + "," + str(extracted_id)
                    #         ))
                    self.to_android_message_queue.put_nowait("TARGET," + str(obstacle_id) + "," + str(extracted_id))


                    self.stm_is_rdy_to_take_commands.value = 1
                    print(self.stm_is_rdy_to_take_commands.value)
                    print(self.start_imagerec_task.value)

                    if self.algo_cmds_queue.empty():
                        self.start_imagerec_task.value = 0
                        # self.message_queue.put_nowait(self._format_for(
                        #     ANDROID_HEADER, 
                        #     "{cat: info, value: 'Image Rec Task Complete'}"
                        #     ))
                        self.to_android_message_queue.put_nowait("{ cat: info, value: 'Image Rec Task Complete'}")
                        time.sleep(1)
                        # self.message_queue.put_nowait(self._format_for(
                        #     ANDROID_HEADER, 
                        #     "{cat: status, value: finished}"
                        #     ))
                        self.to_android_message_queue.put_nowait("{cat: status, value: finished}")

                    # if reply == 'End':
                    #     break  # stop sending images
                    
    #                 # example replies
    #                 # "1|2|3" 3 symbols in order from left to right
    #                 # "1|-1|3" 2 symbols, 1 on the left, 1 on the right
    #                 # "1" 1 symbol either on the left, middle or right
    #                 else:
    #                     detections = reply.split(MESSAGE_SEPARATOR) #from server
    #                     coordinate_list_obstacle = obstacle_coordinates.split(MESSAGE_SEPARATOR) #from algo

    #                     for detection, coordinates in zip(detections, coordinate_list_obstacle):
    #                         print("Coordinate:",coordinates)
    #                         print("Detection:",detection)

    #                         if detection == '-1':
    #                             continue  # if there isn't any  symbol detected, mapping of symbol id will  be skipped
    #                         elif coordinates == '-1,-1':
    #                             continue  # if there isn't any obstacle detected, mapping of id symbol will skipped

    #                         else:
    #                             id_string_to_android = '{"image":[' + coordinates + \
    #                             ',' + detection + ']}'
    #                             print(id_string_to_android)
                                
    #                             if detection not in image_id_list:
    #                                 self.image_count.value += 1
    #                                 image_id_list.put_nowait(detection)
                                
    #                             self.to_android_message_queue.put_nowait(
    #                                 id_string_to_android + NEWLINE
    #                             )


            except Exception as error:
                print('Image processing process has failed: ' + str(error))

    def _format_for(self, target, payload):
        return {
            'target': target,
            'payload': payload,
        }
if __name__ == '__main__':
    os.system("sudo hciconfig hci0 piscan")
    multiprocess_communication_process = MultiProcessCommunicator()
    multiprocess_communication_process.start()