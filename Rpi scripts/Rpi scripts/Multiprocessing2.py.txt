from Android import Android_communicator
from Stm import Stm_communicator
from Config import STOPPING_IMAGE, IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_FORMAT
from Protocols import *
import os

#from PIL import Image
#import numpy as np
import imagezmq.imagezmq as imagezmq
import time
from picamera import PiCamera
from picamera.array import PiRGBArray


import collections
from multiprocessing import Process, Value, Manager

import ast
import queue

img_count = 0

class MultiProcessCommunicator:
    """
    This class will carry out multi-processing communication process between Android_communicator, Image rec server and STM.
    """
    def __init__(self, image_processing_server_url: str=None):
        """
        Start the multiprocessing process and set up all the relevant variables
        Upon starting, RPi will connect to individual devices in the following order
        - Android
        - Stm
        - Image rec
        The multiprocessing queue will also be instantiated
        """
        print('Starting Multiprocessing Communication')

        self.stm = Stm_communicator()  # handles connection to Stm
        self.android = Android_communicator()  # handles connection to Android
        
        self.manager = Manager()

        self.stm_is_rdy_to_take_commands = self.manager.Value('i', 1)
        self.image_rec_is_recognising_image = self.manager.Value('i', 0)

        self.num_of_recognised_images = self.manager.Value('i', 0) # max of 2

        # messages from Stm_communicator and Android_communicator are placed in this queue before being read
        self.message_queue = self.manager.Queue()

        self.to_android_message_queue = self.manager.Queue()

        self.read_stm_process = Process(target=self._read_stm)
        self.read_android_process = Process(target=self._read_android)
        
        self.write_process = Process(target=self._write_target)
        self.write_android_process = Process(target=self._write_android)
        
        # for image recognition
        self.image_process = Process(target=self._process_pic)
        self.image_queue = self.manager.Queue()

        
    def start(self):        
        try:
            self.android.connect()
            self.stm.connect()

            print('Connected to Stm and Android')

            self.read_stm_process.start()
            self.read_android_process.start()
            self.write_process.start()
            self.write_android_process.start()

            if self.image_process is not None:
                self.image_process.start()
                print('All processes have started : read-stm, read-android, write-android, image_processing')
            else:
                print('All processes have started : read-stm, read-android, write-android')

            print('Multiprocess communication session started')
            
        except Exception as error:
            raise error

        self._allow_reconnection()


    def _allow_reconnection(self):
        print('RPi can reconnect now')

        while True:
            try:

                if not self.read_stm_process.is_alive():
                    self._reconnect_stm()
                    
                if not self.read_android_process.is_alive():
                    self._reconnect_android()
                        
                if not self.write_android_process.is_alive():
                    self._reconnect_android()
                
                if self.image_process is not None and not self.image_process.is_alive():
                   self.image_process.terminate()
                    
            except Exception as error:
                print("Error during reconnection: ",error)
                raise error

    def _reconnect_stm(self):
        self.stm.disconnect()
        
        self.read_stm_process.terminate()
        self.write_process.terminate()
        self.write_android_process.terminate()

        self.stm.connect()

        self.read_stm_process = Process(target=self._read_stm)
        self.read_stm_process.start()

        self.write_process = Process(target=self._write_target)
        self.write_process.start()
        
        self.write_android_process = Process(target=self._write_android)
        self.write_android_process.start()

        print('Successfully reconnected to stm')


    def _reconnect_android(self):
        self.android.disconnect()
        
        self.read_android_process.terminate()
        self.write_process.terminate()
        self.write_android_process.terminate()
        
        self.android.connect()
        
        self.read_android_process = Process(target=self._read_android)
        self.read_android_process.start()

        self.write_process = Process(target=self._write_target)
        self.write_process.start()
        
        self.write_android_process = Process(target=self._write_android)
        self.write_android_process.start()

        print('Successfully reconnected to android')
        
    def _read_stm(self):
        while True:
            try:
                messages = self.stm.read()

                if messages is None:
                    continue
                message_list = messages.splitlines()
                
                for message in message_list:
                    if len(message) <= 0:
                        continue

                    self.stm_is_rdy_to_take_commands.value = 1
                    if message == Stm.READY_TO_TAKE_CMD:
                        print("Ready to send command to stm")
                    elif message == Stm.CAN_TAKE_PICTURE:
                        if self.image_rec_is_recognising_image.value == 0:
                            print("Taking pic now")
                            time.sleep(0.2)
                            
                            self.image_rec_is_recognising_image.value = 1
                            image = self._take_pic()
                            self.image_queue.put_nowait(image)
                    elif message == Stm.FINISHED_FIRST_LEFT_TURN or message == Stm.FINISHED_FIRST_RIGHT_TURN:
                        print("Finished first turn")
                    elif message == Stm.FINISHED_SECOND_LEFT_TURN or message == Stm.FINISHED_SECOND_RIGHT_TURN:
                        print("Car is back home!")
                        self.to_android_message_queue.put_nowait("{ cat: info, value: 'Fastest Car Task Complete'}")
                        self.to_android_message_queue.put_nowait("{cat: status, value: finished}")
                    
            except Exception as error:
                print('Process read_stm failed: ' + str(error))
                break    

    # I am only reading SFC (start fastest car)
    def _read_android(self):
        while True:
            try:
                messages = self.android.read()
                
                if messages is None:
                    continue
                else:
                    print("message read from android")
                    print(messages)

                message_list = messages.splitlines()

                for message in message_list:
                    print("checking message")
                    if len(message) <= 0:
                        continue
                    else:
                        # automovement of STM via algo
                        if message == Android_Algorithm.START_FASTEST_CAR:
                            # take pic to send to image rec
                            # once picture is taken, move stm forward

                            # image = self._take_pic()
                            # self.image_queue.put_nowait(image)

                            self.message_queue.put_nowait(self._format_for(
                                STM_HEADER, "f200".encode()
                            ))
                        elif message == Android_Algorithm.START_IMAGE_REC:
                            self.start_imagerec_task.value = 1
                            self.to_android_message_queue.put_nowait("{cat: info, value: 'Recognising Images'}")

            except Exception as error:
                print('Process read_android failed: ' + str(error))
                #break

    def _write_target(self):
        while True:
            target = None
            message = None
            try:
                # message queue is strictly for stm
                if self.message_queue.empty() == False and self.stm_is_rdy_to_take_commands.value == 1:
                    self.stm_is_rdy_to_take_commands.value = 0
                    message = self.message_queue.get_nowait()
                    print(message)
                    target, payload = message['target'], message['payload']

                    if target == STM_HEADER:
                        self.stm.write(payload)
                    else:
                        print("Invalid header", target)

            except Exception as error:
                print('Process write_target failed: ' + str(error))

                if target == STM_HEADER:
                    self.dropped_connection.value = 0
                    
                self.message_queue.put_nowait(message)
                break
                
    def _write_android(self):
        while True:
            message = None
            try:
                if self.to_android_message_queue.empty() == False:
                    message = self.to_android_message_queue.get_nowait()
                    time.sleep(1)
                    self.android.write(message)
            except Exception as error:
                print('Process write_android failed: ' + str(error))
                self.to_android_message_queue.put_nowait(message)
                break
				
    def _take_pic(self):
        global img_count
        try:
            # initialize the camera and grab a reference to the raw camera capture
            camera = PiCamera(resolution=(1920, 1088))  # '1920x1080'
            rawCapture = PiRGBArray(camera)
            
            # allow the camera to warmup
            time.sleep(0.2)
            
            # grab an image from the camera
            camera.capture(rawCapture, format='bgr')
            image = rawCapture.array
            camera.close()

            # print("took image")
            # reply = sender.send_image('image message from RPi', image)
            # print("sent image")
            # reply = reply.decode('utf-8')
            # print("Reply:" + reply)

        except Exception as error:
            print('Picture taking process failed: ' + str(error))
        
        return image
    
    def _process_pic(self):
        print("----------------------- Image Processing Starts -------------------")
        #print(self.image_processing_server_url)
        #print(type(self.image_processing_server_url))
        
        # AMANDA'S
        # image_sender = imagezmq.ImageSender(
        #     connect_to='tcp://192.168.19.54:5555')

        # TzeChuan's
        image_sender = imagezmq.ImageSender(
            connect_to='tcp://192.168.19.184:5555')

        # Chee Yang's
        # image_sender = imagezmq.ImageSender(
        #     connect_to='tcp://192.168.19.197:5555')

        image_id_list = []
        while True:
            try:
                if not self.image_queue.empty():
                    message_for_image =  self.image_queue.get_nowait()
                    print("sending image to image processing server")
                    image = message_for_image

                    #print("-----------Prepareing to send image---------")

                    message_for_image_rec = ""

                    # to tell image rec server to start stitching images
                    if self.num_of_recognised_images.value == 1:
                        message_for_image_rec = "l" 

                    reply = image_sender.send_image(
                        message_for_image_rec,
                        image
                    )
                    
                    reply = reply.decode('utf-8')
                    print("Reply:" + reply)

                    if reply != "I3" and reply != "I4":
                        # take pic again
                        image = self._take_pic()
                        self.image_queue.put_nowait(image)
                    else:
                        self.image_rec_is_recognising_image.value = 0
                        self.num_of_recognised_images.value += 1
                        extracted_id = int(reply[1:])
                        
                        print("num of recognised images: ", str(self.num_of_recognised_images.value))

                        message_to_stm = None
                        if self.num_of_recognised_images.value == 1:
                            # turn at the first image
                            if extracted_id == 4:
                                message_to_stm = "r000".encode()
                            else:
                                message_to_stm = "l000".encode()
                        elif self.num_of_recognised_images.value == 2:
                            # turn at the second image
                            if extracted_id == 4:
                                message_to_stm = "R000".encode()
                            else:
                                message_to_stm = "L000".encode()

                        self.message_queue.put_nowait(self._format_for(
                                STM_HEADER, message_to_stm
                            )) 

                    # if self.algo_cmds_queue.empty():
                    #     self.start_imagerec_task.value = 0
                    #     # self.message_queue.put_nowait(self._format_for(
                    #     #     ANDROID_HEADER, 
                    #     #     "{ cat: info, value: 'Image Rec Task Complete'}"
                    #     #     ))
                    #     # self.message_queue.put_nowait(self._format_for(
                    #     #     ANDROID_HEADER, 
                    #     #     "{cat: status, value: finished}"
                    #     #     ))
                    #     self.to_android_message_queue.put_nowait("{cat: status, value: finished}")

                    # if reply == 'End':
                    #     break  # stop sending images
                    
    #                 # example replies
    #                 # "1|2|3" 3 symbols in order from left to right
    #                 # "1|-1|3" 2 symbols, 1 on the left, 1 on the right
    #                 # "1" 1 symbol either on the left, middle or right
    #                 else:
    #                     detections = reply.split(MESSAGE_SEPARATOR) #from server
    #                     coordinate_list_obstacle = obstacle_coordinates.split(MESSAGE_SEPARATOR) #from algo

    #                     for detection, coordinates in zip(detections, coordinate_list_obstacle):
    #                         print("Coordinate:",coordinates)
    #                         print("Detection:",detection)

    #                         if detection == '-1':
    #                             continue  # if there isn't any  symbol detected, mapping of symbol id will  be skipped
    #                         elif coordinates == '-1,-1':
    #                             continue  # if there isn't any obstacle detected, mapping of id symbol will skipped

    #                         else:
    #                             id_string_to_android = '{"image":[' + coordinates + \
    #                             ',' + detection + ']}'
    #                             print(id_string_to_android)
                                
    #                             if detection not in image_id_list:
    #                                 self.image_count.value += 1
    #                                 image_id_list.put_nowait(detection)
                                
    #                             self.to_android_message_queue.put_nowait(
    #                                 id_string_to_android + NEWLINE
    #                             )


            except Exception as error:
                print('Image processing process has failed: ' + str(error))

    def _format_for(self, target, payload):
        return {
            'target': target,
            'payload': payload,
        }
if __name__ == '__main__':
    os.system("sudo hciconfig hci0 piscan")
    multiprocess_communication_process = MultiProcessCommunicator()
    multiprocess_communication_process.start()